/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SkillsRouteImport } from './routes/skills'
import { Route as ProjectRouteImport } from './routes/project'
import { Route as MainRouteImport } from './routes/main'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'

const SkillsRoute = SkillsRouteImport.update({
  id: '/skills',
  path: '/skills',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/main': typeof MainRoute
  '/project': typeof ProjectRoute
  '/skills': typeof SkillsRoute
}
export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/main': typeof MainRoute
  '/project': typeof ProjectRoute
  '/skills': typeof SkillsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/main': typeof MainRoute
  '/project': typeof ProjectRoute
  '/skills': typeof SkillsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/contact' | '/main' | '/project' | '/skills'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/contact' | '/main' | '/project' | '/skills'
  id: '__root__' | '/about' | '/contact' | '/main' | '/project' | '/skills'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  MainRoute: typeof MainRoute
  ProjectRoute: typeof ProjectRoute
  SkillsRoute: typeof SkillsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/skills': {
      id: '/skills'
      path: '/skills'
      fullPath: '/skills'
      preLoaderRoute: typeof SkillsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  MainRoute: MainRoute,
  ProjectRoute: ProjectRoute,
  SkillsRoute: SkillsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
